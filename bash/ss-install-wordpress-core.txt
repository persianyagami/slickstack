#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: https://mirrors.slickstack.io/bash/ss-install-wordpress-core.txt ######################
#### path: /var/www/ss-install-wordpress-core ######################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls the WordPress module (CMS) package and non-config files (idempotent) ######
#### module version: WordPress 5.7.x ###############################################################
#### sourced by: ss-install, ss install wordpress, ss install wp ###################################
#### bash aliases: ss install wordpress core, ss install wp core ###################################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED AND ON CURRENT BUILD BEFORE RUNNING SS-INSTALL ##
## ENSURE YOUR SS-CONFIG BUILD REMAINS CURRENT BY RUNNING SS-UPDATE OCCASIONALLY ##

## source ss-config ##
source /var/www/ss-config

## source ss-functions ##
source /var/www/ss-functions

## BELOW THIS RELIES ON SS-CONFIG AND SS-FUNCTIONS

####################################################################################################
#### SS-Install-WordPress-Core: Message (Begin Script) #############################################
####################################################################################################

## this is a simple message that announces to the shell the purpose of this bash script ##
## it will only be noticed by sudo users who manually call ss core bash scripts ##

## echo message ##
echo -e "${PURPLE}Running ss-install-wordpress-core: Reinstalls the WordPress module (CMS) package and non-config files (idempotent)... ${NOCOLOR}"
sleep "$SLEEP_MESSAGE_BEGIN"

####################################################################################################
#### SS-Install-WordPress-Core: Proceed If Rate-Limit Satisfied ####################################
####################################################################################################

## proceed if more than 720 mins (12 hours) ##
if [[ ! -f "/var/www/meta/.timestamp-ss-install-wordpress-core" ]] || \
   [[ -n $(find "/var/www/meta/.timestamp-ss-install-wordpress-core" -amin +720) ]]
then

####################################################################################################
#### SS-Install-WordPress-Core: Install Ubuntu Utils ###############################################
####################################################################################################

## run ss-install-ubuntu-utils ##
source "$PATH_SS_INSTALL_UBUNTU_UTILS"

####################################################################################################
#### SS-Install-WordPress-Core: Cleanup Temporary Files ############################################
####################################################################################################

## delete tmp files ##
rm "$TMP_WORDPRESS_ZIP"

####################################################################################################
#### SS-Install-WordPress-Core: Install WordPress Core (CMS) #######################################
####################################################################################################

## CMS modules are installed on SlickStack via files hosted on our public mirror servers ##
## we always install the latest stable patched minor version (not major versions) ##

## cleanup files ##
rm /var/www/html/wordpress*
rm /var/www/html/staging/wordpress*
rm /var/www/html/dev/wordpress*

## make dirs ##
mkdir /var/www/html

## brief permissions reset ##
chown -R $SFTP_USER:wordpress /var/www/html
chown -R $SFTP_USER:wordpress /var/www/html/staging
chown -R $SFTP_USER:wordpress /var/www/html/dev
chmod 6775 /var/www/html
chmod 6775 /var/www/html/staging
chmod 6775 /var/www/html/dev

## download latest (patched) WordPress version ##
wget -O "$TMP_WORDPRESS_ZIP" "$MIRROR_WORDPRESS_ZIP"


## ADD CHECK HERE... if /tmp/wordpress.zip not found (e.g. SS mirror down) then retrieve latest from wordpress.org/latest.zip


####################################################################################################
#### SS-Install-WordPress-Core: Cleanup Files + Install WordPress Core (Production) ################
####################################################################################################

## this installation process removes outdated WordPress Core files or potential malware ##
## it is not foolproof but it should address the majority of common problems ##

## cleanup old files and potential malware unless disabled ##
if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_WP_ADMIN" != "false" ]]; then
    rm /var/www/html/wp-admin
fi

if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_WP_INCLUDES" != "false" ]]; then
    rm /var/www/html/wp-includes
fi

if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_PHP_FILES_ROOT" != "false" ]]; then
    find /var/www/html/ -maxdepth 1 -type f ! -name "wp-config.php" -name "*.php" -delete 
    # cd /var/www/html/ && find . -type f ! -name "wp-config.php" -name "*.php" -delete 
fi

## copy zip to production ##
cp "$TMP_WORDPRESS_ZIP" /var/www/html
unzip /var/www/html/wordpress.zip -d /var/www/html
chown -R www-data:wordpress /var/www/html/wordpress
chmod 775 /var/www/html/wordpress

## install wp core files ##
rsync /var/www/html/wordpress/* /var/www/html

####################################################################################################
#### SS-Install-WordPress-Core: Cleanup Files + Install WordPress Core (Staging) ###################
####################################################################################################

## this installation process removes outdated WordPress Core files or potential malware ##
## it is not foolproof but it should address the majority of common problems ##

## cleanup old files and potential malware unless disabled ##
if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_WP_ADMIN" != "false" ]]; then
    rm /var/www/html/staging/wp-admin
fi

if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_WP_INCLUDES" != "false" ]]; then
    rm /var/www/html/staging/wp-includes
fi

if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_PHP_FILES_ROOT" != "false" ]]; then
    find /var/www/html/staging/ -maxdepth 1 -type f ! -name "wp-config.php" -name "*.php" -delete 
    # cd /var/www/html/staging/ && find . -type f ! -name "wp-config.php" -name "*.php" -delete 
fi

## copy zip to staging ##
cp "$TMP_WORDPRESS_ZIP" /var/www/html/staging
unzip /var/www/html/staging/wordpress.zip -d /var/www/html/staging
chown -R www-data:wordpress /var/www/html/staging/wordpress
chmod 775 /var/www/html/staging/wordpress

## install wp core files ##
rsync /var/www/html/staging/wordpress/* /var/www/html/staging

####################################################################################################
#### SS-Install-WordPress-Core: Cleanup Files + Install WordPress Core (Dev) #######################
####################################################################################################

## this installation process removes outdated WordPress Core files or potential malware ##
## it is not foolproof but it should address the majority of common problems ##

## cleanup old files and potential malware unless disabled ##
if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_WP_ADMIN" != "false" ]]; then
    rm /var/www/html/dev/wp-admin
fi

if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_WP_INCLUDES" != "false" ]]; then
    rm /var/www/html/dev/wp-includes
fi

if [[ -f "/tmp/wordpress.zip" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_DELETE_PHP_FILES_ROOT" != "false" ]]; then
    find /var/www/html/dev/ -maxdepth 1 -type f ! -name "wp-config.php" -name "*.php" -delete 
    # cd /var/www/html/dev/ && find . -type f ! -name "wp-config.php" -name "*.php" -delete 
fi

## copy zip to dev ##
cp "$TMP_WORDPRESS_ZIP" /var/www/html/dev
unzip /var/www/html/dev/wordpress.zip -d /var/www/html/dev
chown -R www-data:wordpress /var/www/html/dev/wordpress
chmod 775 /var/www/html/dev/wordpress

## install wp core files ##
rsync /var/www/html/dev/wordpress/* /var/www/html/dev

####################################################################################################
#### SS-Install-WordPress-Core: More Cleanup ######################
####################################################################################################

## cleanup files ##
rm /tmp/wordpress.zip*
rm /var/www/html/wordpress*
rm /var/www/html/staging/wordpress*
rm /var/www/html/dev/wordpress*

####################################################################################################
#### SS-Install-WordPress-Core: Optimize WP_Options (For Virgin Installs) ##########################
####################################################################################################

if [[ ! -f "$TIMESTAMP_SS_INSTALL_WORDPRESS_CORE" ]] && [[ "$SS_INSTALL_WORDPRESS_CORE_CLEANUP_OPTIONS" == "disabledfornow" ]]; then

## optimize wp_options ##
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='admin_email'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='mystery' WHERE option_name='avatar_default'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='PG' WHERE option_name='avatar_rating'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='blacklist_keys'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='UTF-8' WHERE option_name='blog_charset'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='blog_public'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='blogdescription'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='blogname'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='/.' WHERE option_name='category_base'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='90' WHERE option_name='close_comments_days_old'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='close_comments_for_old_posts'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='2' WHERE option_name='comment_max_links'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='comment_moderation'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='asc' WHERE option_name='comment_order'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='comment_registration'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='comment_whitelist'"; ## previously approved comments not required in order to be whitelisted
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='comments_notify'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='50' WHERE option_name='comments_per_page'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='M j, Y' WHERE option_name='date_format'"; ## M j, Y = Nov 6, 2010
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='open' WHERE option_name='default_comment_status'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='newest' WHERE option_name='default_comments_page'"; ## show newest comments on 1st page
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='closed' WHERE option_name='default_ping_status'"; ## disable pingbacks
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='default_pingback_flag'"; ## disable pingbacks
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='subscriber' WHERE option_name='default_role'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='embed_autourls'"; ## disable automatic (oEmbed) social media embeds
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='600' WHERE option_name='embed_size_h'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='embed_size_w'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='enable_app'"; ## disable the Atom protocol
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='enable_xmlrpc'"; ## disable the XML-RPC protocol (REST API is already in WP Core)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='gmt_offset'"; ## 0 = GMT (UTC)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='gzipcompression'"; ## disable Gzip in WP (PHP) and let the server handle it
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='hack_file'"; ## legacy feature
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='text/html' WHERE option_name='html_type'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='none' WHERE option_name='image_default_align'"; ## disable image alignment by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='none' WHERE option_name='image_default_link_type'"; ## disable image links by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='medium' WHERE option_name='image_default_size'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1024' WHERE option_name='large_size_h'"; ## large images height = 1024px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1024' WHERE option_name='large_size_w'"; ## large images width = 1024px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='link_manager_enabled'"; ## disable janky links menu
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_login'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_pass'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_port'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='mailserver_url'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='768' WHERE option_name='medium_large_size_h'"; ## medium-large images height = 768px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='768' WHERE option_name='medium_large_size_w'"; ## medium-large images width = 768px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='300' WHERE option_name='medium_size_h'"; ## medium images height = 300px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='300' WHERE option_name='medium_size_w'"; ## medium images width = 300px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='moderation_keys'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='moderation_notify'"; ## email the admin when comments need moderation
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='page_comments'"; ## disable paged comments by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='page_for_posts'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='2' WHERE option_name='page_on_front'"; ## 2 = sample page
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='/%category%/%postname%' WHERE option_name='permalink_structure'"; ## perfect for custom post types and taxonomies
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='ping_sites'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='10' WHERE option_name='posts_per_page'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='10' WHERE option_name='posts_per_rss'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='require_name_email'"; ## comment authors must include their name and email address
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='rss_use_excerpt'"; ## encourage RSS subscribers to click through excerpts
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='show_avatars'"; ## enable comment avatars
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='show_comments_cookies_opt_in'"; ## disable the opt-in warning for comment cookies (GDPR bloat)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='page' WHERE option_name='show_on_front'"; ## depends on page_on_front
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='sidebars_widgets'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='site_icon'"; ## disabled by default
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='start_of_week'"; ## 1 = Monday
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='/tag' WHERE option_name='tag_base'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='thread_comments'"; ## enable threaded comments
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='2' WHERE option_name='thread_comments_depth'"; ## depth of comment threads = 2 levels (similar to Facebook, YouTube, etc)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='thumbnail_crop'"; ## crop image thumbnails to exact dimensions (not proportional)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='150' WHERE option_name='thumbnail_size_h'"; ## image thumbnails height = 150px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='150' WHERE option_name='thumbnail_size_w'"; ## image thumbnails width = 150px
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='g:ia' WHERE option_name='time_format'"; ## g:i a = 12:50 am
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='timezone_string'"; ## NULL (e.g. UTC but might overwrite gmt_offset)
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='upload_path'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='' WHERE option_name='upload_url_path'"; ## NULL
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='1' WHERE option_name='uploads_use_yearmonth_folders'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='use_balanceTags'"; ## disable XHTML corrections
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='use_smilies'"; ## disable emojis
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='use_trackback'"; ## disable trackbacks
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='0' WHERE option_name='users_can_register'"; ## disable new user (guest) registrations by default

fi

####################################################################################################
#### SS-Install-WordPress-Core: Fix Site Domains (Modify Database Options) #########################
####################################################################################################

## SNIPPET: ss-install-wordpress-core, ss-install-wordpress-config

## here we manually fix certain fields in the MySQL database to ensure proper functions ##
## this fix required for WP Multisite (wp-config will override on single sites) ##

## fix site domains (production) ##
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='https://$SITE_DOMAIN' WHERE option_name='home'";
mysql --execute="UPDATE ${DB_NAME}.${DB_PREFIX}options SET option_value='https://$SITE_DOMAIN' WHERE option_name='siteurl'";

## fix site domains (staging) ##
if [[ "$STAGING_SITE" != "false" ]]; then 
mysql --execute="UPDATE ${DB_NAME}.staging_options SET option_value='https://$SITE_DOMAIN/staging' WHERE option_name='home'";
mysql --execute="UPDATE ${DB_NAME}.staging_options SET option_value='https://$SITE_DOMAIN/staging' WHERE option_name='siteurl'";

mysql --execute="UPDATE ${DB_NAME}_staging.${DB_PREFIX}options SET option_value='https://staging.$SITE_TLD' WHERE option_name='home'";
mysql --execute="UPDATE ${DB_NAME}_staging.${DB_PREFIX}options SET option_value='https://staging.$SITE_TLD' WHERE option_name='siteurl'";
fi

## fix site domains (dev) ##
if [[ "$DEV_SITE" != "false" ]]; then 
mysql --execute="UPDATE ${DB_NAME}.dev_options SET option_value='https://$SITE_DOMAIN/dev' WHERE option_name='home'";
mysql --execute="UPDATE ${DB_NAME}.dev_options SET option_value='https://$SITE_DOMAIN/dev' WHERE option_name='siteurl'";

mysql --execute="UPDATE ${DB_NAME}_dev.${DB_PREFIX}options SET option_value='https://dev.$SITE_TLD' WHERE option_name='home'";
mysql --execute="UPDATE ${DB_NAME}_dev.${DB_PREFIX}options SET option_value='https://dev.$SITE_TLD' WHERE option_name='siteurl'";
fi

####################################################################################################
#### SS-Install-WordPress-Core: Configure WP-Config File (Production + Staging) ####################
####################################################################################################

## this wp-config setup script is distinct so that it can be run separately if needed ##
## it will also be called whenever the ss-sync (staging sync) script is run ##


## UNCOMMENT AFTER STAGING AND DEV ARE WORKING ##
## run ss-install-wordpress-config ##
# if [[ ! -f "/var/www/html/wp-config.php" ]] || [[ ! -f "/var/www/html/staging/wp-config.php" ]] || [[ ! -f "/var/www/html/dev/wp-config.php" ]]; then 
#    source /var/www/ss-install-wordpress-config
# fi

####################################################################################################
#### SS-Install-WordPress-Core: Purge Cache (WordPress Transients) #################################
####################################################################################################

## manually deletes all transients (temporary query cache data) from WordPress database ##
## this is a more forceful approach than simply purging the Redis object cache ##

## run ss-purge-transients ##
source "$PATH_SS_PURGE_TRANSIENTS"

####################################################################################################
#### SS-Install-WordPress-Core: Purge Cache (PHP OPcache) ##########################################
####################################################################################################

## run ss-purge-opcache ##
source "$PATH_SS_PURGE_OPCACHE"

####################################################################################################
#### SS-Install-WordPress-Core: Purge Cache (Redis) ################################################
####################################################################################################

## run ss-purge-redis ##
source "$PATH_SS_PURGE_REDIS"

####################################################################################################
#### SS-Install-WordPress-Core: Reset Permissions (WordPress Core) #################################
####################################################################################################

## run ss-perms-wordpress-core ##
source "$PATH_SS_PERMS_WORDPRESS_CORE"

####################################################################################################
#### SS-Install-WordPress-Core: Cleanup Temporary Files ############################################
####################################################################################################

## delete tmp files ##
rm "$TMP_WORDPRESS_ZIP"

####################################################################################################
#### SS-Install-WordPress-Core: Exit If Script Has Run Recently ####################################
####################################################################################################

## otherwise exit if script has run recently ##
else 
    echo -e ""
    echo -e "${YELLOW}It appears this script has already run during the past several minutes, ${NOCOLOR}"
    echo -e "${YELLOW}therefore it has exited without running (please try again later). ${NOCOLOR}"
    echo -e ""
fi

####################################################################################################
#### SS-Install-WordPress-Core: Touch Timestamp File (End Script) ##################################
####################################################################################################

## this is a dummy timestamp file that will remember the last time this script was run ##
## it can be useful for developer reference and is sometimes used by SlickStack ##

## script timestamp ##
touch "$TIMESTAMP_SS_INSTALL_WORDPRESS_CORE"

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://github.com/littlebizzy/throwaway-theme/blob/master/functions.php
## Ref: https://pressidium.com/blog/2020/wordpress-image-sizes-explained/

## SS_EOF
